#!/usr/bin/env ruby -w

# A portmanteau of "module" and "list". Stashes the homebrew formulae and gems
# installed on a given host to a timestamped, host-specific file in
# ~/.config/modulist.
#
# (File under "hack and a half", but it serves its purpose.)

require 'Date'
require 'FileUtils'

class Stash

  attr_accessor :stash_root

  def initialize
    @typemap = {
      'gems' => {
        command: 'gem',
        flags:   '--no-version'
      }
    }

    @stash_root= '~/.config/modulist'
    @stash_path = File.expand_path(@stash_root)
    FileUtils.mkdir_p(@stash_path)
  end

  # Return the tail end of a basename. This is separate from full_path because
  # we also use the tail end as part of a glob for the `purge` step below.

  def name_tail(type)
    hostname = %x(hostname -s).chomp

    [hostname, type].join('_') + '.txt'
  end

  # Given the name of a type, return an absolute path, in the dedicated
  # directory, to a file whose name incorporates the date, base hostname, and
  # type.

  def full_path(type)
    date = Date.today.to_s

    basename = [date, name_tail(type)].join('_')

    File.join(@stash_path, basename)
  end


  # Given the name of a type (e.g. "brew", "gem"), write a list of currently-
  # installed instances to a file.

  def store(type)
    latest = full_path(type)

    command = type
    flags = ''

    # This is so wrong that the hell it earns me has yet to be defined.
    if mapping = @typemap[type]
      command = mapping[:command] || type
      flags   = mapping[:flags]   || ''
    end

    items = %x(#{command} list #{flags})
    puts "#{type}: #{items.split.count}"
    File.open(latest, "w") do |handle|
      handle.write(items)
    end
  end

  # Clean up by deleting all but the most recent stash for this host and type.

  def purge(type)
    fileset = Dir.glob(File.join(@stash_path, "*#{name_tail(type)}")).sort
    fileset.pop

    fileset.each do |file|
      FileUtils.rm(file)
    end
  end
end


# --------------------

stash = Stash.new

types = %w[brew gems]

puts "Updating brew and gem lists in #{stash.stash_root}"

types.each do |type|
  stash.store(type)
  stash.purge(type)
end
