#!/usr/bin/env ruby

require 'time'

# Usage:
#
#   alert
#   alert yellow
#   alert at 17:00
#   alert red at 11:29
#
# If no time is specified, alert immediately.
# If no color is specified, default to white.

# TODO:
#   - Support a help message.
#   - Parse "in" along with "at"
#   - Add support for a particular message.
#     - say it, and create a notification, if provided.
#
#   - terminal-notifier -title "Alert" -message "Gepantsenpants!"

# Check whether any blink(1)s are attached, by checking the exit status of the
# blink1-tool `--list` command.

def blink1_present?
  %x(blink1-tool --list)

  $?.success?
end


# Take an offset expression. Return number of seconds.
# TODO: Add support for "5m", "2m3s", etc.

def parse_delay(delay)
  values = delay.split(':').map(&:to_i)
  total = 0
  offset = 1

  until values.empty? do
    value = values.shift
    total += value * offset
    offset *= 60
  end

  total
end


def parse_args
  time = 0
  message = ""
  color = 'white'

  until ARGV.empty? do
    arg = ARGV.shift

    now = Time.now

    if arg.eql?('at')
      later = Time.parse(ARGV.shift)
      # If the specified time was earlier today, push it to tomorrow,
      # and alert the user that we're doing so.
      if now > later
        later += (24 * 3600)
        puts "Alert set for #{later.strftime('%H:%M:%S')} tomorrow."
      end
      time = later - now
    elsif arg.eql?('in')
      time = parse_delay(ARGV.shift)
    elsif arg.eql?('to')
      message = ARGV.shift
    else
      color = arg
    end

  end

  [time, message, color]
end

# ------------------

abort 'No blink(1) detected!' unless blink1_present?

time, message, color = parse_args

# fork() won't work on Windows or NetBSD. (File under "Boo frickin' hoo".)

fork do
  actions = [
    %Q(blink1-tool -q -m 0 -t 250 --#{color} --blink 10)
  ]

  unless message.empty?
    actions.concat [
      %Q(say -v Daniel "#{message}"),
      %Q(terminal-notifier -title "Alert" -message "#{message}")
    ]
  end

  sleep(time)
  actions.each do |action|
    fork { system(action) }
  end
end
